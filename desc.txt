**********************
POKERNET
**********************

Pokernet is a sample site in which users may register, track their profile, and play poker at tables with up to 5 other people.  Users may also create a table.

Once a user is done with a game, their winnings are placed back into their account.

POKERNET is powered by a combination of Django and node.js.  Utilizing the socket.io library, the node server provides sockets for live chat and betting.  The node server also runs the game, and decides the winners.

The django portion services the website portion, providing he infrastructure for registration and tracking.

***********************
NODE.JS SERVER
***********************

-----------------------
server.js
-----------------------

Purpose:
    - run the node server
    - open the socket
    - add persons to tables
    - create tables
    - initiate games
    - forward chat and bets
    
------------------------
table.js
------------------------

Purpose:
    - provides table class to control hold 'em table
    - hold current game data
    - deal cards
    - alert players to bets

Variables:
    - blind: the current blind of the table
        ~ bet minimum is blind
        ~ bet must be in incriments of blind
    - limit: maximum bet
    - players: array containing player objects currently playing in table
    - waiting: array of players waiting to join after hand is done
    - cards: array containing the cards in the 
    - currentBet: holds the current bet at the table
    - betQueue: a bet queue to hold players for betting order
    - io: the socet on which to emit
    - pot: current pot for the hand
    - numPlayers: number of players at the table playing
    - curPlayer: current player betting
    - dealer: dealer player for the hand, index in players[]
        ~ small blind is dealer + 1
        ~ big blind is dealer + 2 
        
Methods:
    - startGame - called when a hand is to be started
        1) alert players as to who is at the table playing: showPlayers()
        2) set players.active to true
        2) create a deck for the hand: new Deck()
        3) deal the players two cards each: dealPlayers()
        4) create betting queue
        5) auto bet for the small and big blinds (1st on queue = small, 2nd = big)
        6) initiate a round of betting
        
    - showPlayers - emits players on the socket so everyone knows who is playing
    
    - dealPlayers - deals 2 cards to each player at the table
    
    - constructQueue - starting with the player one past the dealer, construct a queue
        - push each player to stack until they are all on
        - finally, push the dealer
        
    - issueBlind - issues a bet automatically for the blind
        - contains two types: 1 sets bet to 1/2 * blind
                              2 sets bet to the blind
    
    - getBet - notifies a player it is their turn for a bet
        - pulls the player off the betQueue
        - notifies players who is betting
        - alertst player it is their turn to bet
        
    - takeBet - recieves a bet from someone
        - three modes:
            - bet - when the function recieves a new bet
                - modifies the players current bet and bank
                - modifies the table current bet, if necessary
                - adds the bet to the pot
                - notifies all players of the bet
                - test for end of betting: if table.currentBet = next player.currentBet
                    - if it is the end of betting:
                        1) reset table and players current bets
                        2) notify players of players status
                        3) reset the bet queue
                        4) test the card length:
                            - if 3, deal the turn and start betting
                            - if 4, deal turn river and start betting
                            - if > 4, its the end of the game
                            - if 0, deal the flop, start betting
                    - else its not the end of betting:
                        1) repush the player to the queue
                        2) get next bet
    
    - addPlayer - adds a player to the table
        - checks if a hand is running:
            - if so, add the player to the waiting queue
            - if not, add them to the player queue and increases the number of players
            
    - getPlayer - takes a player.id and returns its index in the players[]
    
    - fold - folds for a player
        - resets he current bet for player, sets their player.active to false
        
    - getBlind - returns the table blind
    
    - showFlop - gets the 3 cards from deck and adds them to cards[], notifies people of cards
    
    - showTurn - gets 1 card from deck to cards[], notifies players
    
    - showRiver - gets 1 card from deck to cards[], notifies players
    
    - findwinner - judges winner of the game
        - finds all active players and compares hands
        - returned winner gets emitted to sockets
        - resets the pot
        - sets all players to active status
        
************************
DJANGO SERVER
************************
------------------------
game.js
------------------------
Controls the client side of the game flow by recieving socket notifications and modifying player bets.

Variables:
    - players[] - current opponent players
    - numPlayers - number of players at the table
    - myId - my socket id
    - allowBet - boolean to determine if betting is allowed
    - myCurrentBet - my current bet amount
    - tableCurrentBet - current largest bet at the table
    - blind - table blind
    - myCards[] - array of my hands
    - tableCards[] - current cards on the table
    - pot - current table pot
    
Methods:
    #betSend button onClick:
        - set bet amount from input box
        - make sure bet isnt invalid if:
            - bet%blind != 0: not a multiple of the blind
            - bet < blind: if the bet is less than the current blind
            - bet < tableCurrentBet: if the bet is less than the current table bet
            - pot - bet < 0: if this will put you under
            - notify player and return
        - set my current bet to the bet
        - remove bet amount from my pot
        - emit my bet
    
    - receve 'pid' event:
        - this notifies a player of their socket id and blind
        - set this blind and myId
        
    - recieve 'getPlayer' event:
        - this adds a player to the players[] table
        -check to make sure it isn't yourself
        - iterate up the number of players
        - add new player to playerss[]
        - update the player in the view
        
    - recieve 'getHand' event:
        - gets the cards and displays them in the container
        
    - recieve 'card' event: 
        - notifies us that betting s over
        - reset tableCurrentBet
        - reset my current bet
        - reset all player bets
        - if there are cards, set it to the next one
        - else, set it to the first one
        - display the cards
        
    - recieve 'betting' event:
        - if the id is ours, its our turn to bet
            - sho the bet box
        - find the player who is betting and set betting = true
        - update that players view
        
    - recieve 'bet' event:
        - update the table current bet and the table pot
        - if it was us that bet:
            - hide the betbox
            - set show the current table bet
    
